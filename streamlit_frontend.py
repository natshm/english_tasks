import random
from io import StringIO

import streamlit as st
from streamlit import session_state as ss

from generators.piplines import TaskGenerator
from text_tools.txt_to_df import make_df
from try_save_variables import stash

blank = '___'

st.header('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É')
st.subheader(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stash.count_wins()}  –û—à–∏–±–æ–∫ {stash.count_losses()}')
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.title(f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", )
st.sidebar.info(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç–∞ txt),"
    " –≤—ã–±–µ—Ä–µ—Ç–µ —á–∏—Å–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏/–∏–ª–∏ –∏—Ö —Ç–∏–ø"
)
uploaded_file = st.sidebar.file_uploader('Upload text', help="–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–∞–π–ª txt c –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º", type=['txt'])

tasks_count = st.sidebar.selectbox(label='–ß–∏—Å–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π', options=[5, 10, 20, 25], key='task_count')
selected_types = st.sidebar.multiselect(
    '–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π',
    options=stash.tasks_types,
    key='selected_types'

)

is_reset = st.sidebar.button('–ù–æ–≤—ã–π –Ω–∞–±–æ—Ä', type='primary')
st.sidebar.button('–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', on_click=stash.clean_stats)


def reset_tasks():
    stash.seed = random.randint(2, 100000)
    stash.clean()
    for key in ss.keys():
        if 'sbx' in key:
            ss[key] = blank
    st.session_state.selection = 'nolabel'


if is_reset:
    reset_tasks()


@st.cache_data
def upload_txt():
    with StringIO(uploaded_file.getvalue().decode("utf-8")) as steam:
        string_data = steam.read()

    return string_data


def create_text_df(text):
    st.text_area(label=uploaded_file.name, value=text)
    return make_df(text)


def create_tasks(seed):
    if not selected_types:
        tasks = stash.generator.get_tasks(tasks_count, seed=seed)
    else:
        tasks = stash.generator.get_tasks(tasks_count, selected_types, seed=seed)
    return tasks


def render_tasks(tasks):
    for index, task in enumerate(tasks):
        col1, col2 = st.columns(2)
        with col1:
            st.write('')
            st.write(str(task['sentence']))

        with col2:
            for i in range(len(task['options'])):
                option = task['options'][i]
                task['result'][i] = st.selectbox(f'nolabel-{index}',
                                                 [blank] + option,
                                                 label_visibility="hidden",
                                                 key=f'sbx-{index}'
                                                 )
                if task['result'][i] == blank:
                    pass
                elif task['result'][i].lower() == task['answers'][i].lower():
                    st.success('', icon="‚úÖ")
                    stash.wins[hash(task['sentence'])] = 1
                    task['total'] = True
                else:
                    st.error('', icon="üòü")
                    stash.losses[hash(task['sentence'])] = 1
                    task['total'] = False
        # task['total'] = task['result'] == task['answers']
        '---'

    total_sum = sum(task['total'] for task in tasks)

    if total_sum == len(tasks):
        st.success('–£—Å–ø–µ—Ö!')
        st.balloons()
        st.button('–î–∞–ª—å—à–µ', type='primary', on_click=reset_tasks)

    return True


if uploaded_file is not None:
    text = upload_txt()
    if not stash.tasks:
        if not stash.generator:
            stash.generator = TaskGenerator(create_text_df(text))
            stash.generator.run_pipeline(is_shuffle=False)
        if len(stash.tasks_types) < 2:
            stash.tasks_types = stash.generator.get_tasks_types()
        st.subheader('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:')
        stash.tasks = create_tasks(stash.seed)

    render_tasks(stash.tasks)
